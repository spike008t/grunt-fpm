// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var fpm, fs, spawn;

  fs = require('fs');

  spawn = require('child_process').spawn;

  fpm = (function() {
    function fpm() {
      this.debug = false;
      this.source = null;
      this.type = null;
      this.prefix = null;
      this.description = null;
      this.name = null;
      this.version = null;
      this.scripts = {
        preInstall: null,
        postInstall: null
      };
      this.arch = 'all';
      this.outputPath = "./";
    }

    fpm.prototype.setOutputPath = function(outputPath) {
      this.outputPath = outputPath;
      return this;
    };

    fpm.prototype.getOutputPath = function() {
      return this.outputPath;
    };

    fpm.prototype.setArch = function(arch) {
      this.arch = arch;
      return this;
    };

    fpm.prototype.getArch = function() {
      return this.arch;
    };

    fpm.prototype.unsetDebug = function() {
      this.debug = false;
      return this;
    };

    fpm.prototype.setDebug = function() {
      this.debug = true;
      return this;
    };

    fpm.prototype.isDebug = function() {
      return this.debug;
    };

    fpm.prototype.setSource = function(_source) {
      if (!fs.existsSync(_source)) {
        throw "File " + script + " does not exists!";
      }
      this.source = _source;
      return this;
    };

    fpm.prototype.getSource = function() {
      return this.source;
    };

    fpm.prototype.setType = function(_type) {
      switch (_type) {
        case 'rpm':
        case 'deb':
          this.type = _type;
          break;
        default:
          throw "Illegal argument: " + _type + " must be deb or rpm";
      }
      return this;
    };

    fpm.prototype.getType = function() {
      return this.type;
    };

    fpm.prototype.setPrefix = function(prefix) {
      this.prefix = prefix;
      return this;
    };

    fpm.prototype.getPrefix = function() {
      return this.prefix;
    };

    fpm.prototype.unsetPrefix = function() {
      this.prefix = null;
      return this;
    };

    fpm.prototype.setDescription = function(description) {
      this.description = description;
      return this;
    };

    fpm.prototype.getDescription = function() {
      return this.description;
    };

    fpm.prototype.setVersion = function(version) {
      this.version = version;
      return this;
    };

    fpm.prototype.getVersion = function() {
      return this.version;
    };

    fpm.prototype.setName = function(name) {
      this.name = name;
      return this;
    };

    fpm.prototype.getName = function() {
      return this.name;
    };

    fpm.prototype.getPreInstall = function() {
      return this.scripts.preInstall;
    };

    fpm.prototype.setPreInstall = function(script) {
      if (!script) {
        return this;
      }
      if (!fs.existsSync(script)) {
        throw "File " + script + " does not exists!";
      }
      this.scripts.preInstall = script;
      return this;
    };

    fpm.prototype.getPostInstall = function() {
      return this.scripts.postInstall;
    };

    fpm.prototype.setPostInstall = function(script) {
      if (!script) {
        return this;
      }
      if (!fs.existsSync(script)) {
        throw "File " + script + " does not exists!";
      }
      this.scripts.postInstall = script;
      return this;
    };

    fpm.prototype.generateDefaultsArgs = function(args) {
      args = args || [];
      if (this.debug) {
        args.push('--debug');
      }
      args.push('-s', 'dir');
      args.push('-t', this.type);
      args.push('-n', this.name);
      args.push('-a', this.arch);
      args.push('-v', this.version);
      args.push('-p', this.outputPath);
      if (this.description) {
        args.push('--description', this.description);
      }
      if (this.scripts.preInstall) {
        args.push('--before-install', this.scripts.preInstall);
      }
      if (this.scripts.postInstall) {
        args.push('--after-install', this.scripts.postInstall);
      }
      if (this.prefix) {
        args.push('--prefix', this.prefix);
      }
      return args;
    };

    fpm.prototype.generateArgsRpm = function(args) {
      args = args || [];
      args.push('--rpm-os', 'linux');
      return args;
    };

    fpm.prototype.generateArgsDeb = function(args) {
      args = args || [];
      return args;
    };

    fpm.prototype.build = function(callback, loggerCallback) {
      var args, builder;
      args = this.generateDefaultsArgs([]);
      switch (this.type) {
        case 'deb':
          args = this.generateArgsDeb(args);
          break;
        case 'rpm':
          args = this.generateArgsRpm(args);
      }
      args.push('-C', this.source);
      args.push("./");
      loggerCallback(null, "Execute command with theses args: " + args.join(' '));
      builder = spawn('fpm', args);
      builder.stdout.on('data', function(data) {
        return loggerCallback(null, data);
      });
      builder.stderr.on('data', function(data) {
        return loggerCallback(data, null);
      });
      return builder.on('close', function(code) {
        return callback(code);
      });
    };

    return fpm;

  })();

  module.exports = fpm;

}).call(this);
